%h1= glyph_and_text HarbourCrane::Application::Glyph::APP, "Edit \"#{ @app.slug.titleize }\""

%br
= simple_form_for :app do |f|
  = row do
    = col num: 8 do
      %h2 Docker Compose
      = nav type: :tabs do |n|
        - n.link 'Rookie', url: '#compose-rookie', selector: 'compose-rookie'
        - n.link 'Expert', url: '#compose-expert', selector: 'compose-expert', status: :active
      %br
      .tab-content
        - bak_files = "#{ compose_app_dir(@app.slug) }/*.bak-*"
        = f.input :upstart, label: "Upstart version", selected: @app.upstart_file_version, collection: version_array(Dir.glob(bak_files))

        = panel tab: 'compose-rookie' do
          %h3 Container
          = panel do
            = f.input :container_name, label: 'Name', placeholder: 'eq. web'
            = f.input :image, placeholder: "eq. docker/docker-manager:beta", hint: 'Must be registry_host[:registery_port]/name[:tag]'
            = f.input :ports, placeholder: 'eq. 3003:3000; 3002:3002'

            = f.input :environment, as: :text, placeholder: 'eq. RAILS_ENV:production; VIRTUAL_HOST: subdomain.domain.com'

            = f.input :links, placeholder: 'eq. db'

            %br

          = link_to glyph_and_text('plus-circle', 'New container'), "#"
        = panel tab: 'compose-expert', status: :active do
          - file_path = "#{ compose_app_dir(@app.slug) }/docker-compose.yml"
          = "File: #{ file_path }"
          - if File.exist?(file_path)
            = f.input :docker_compose, as: :text, input_html: { rows: 25, class: 'code', value: File.read(file_path) }
          - else
            %pre No file exist

    = col num: 4 do
      %h2 Volumes
      - dir_path = "#{ HarbourCrane::Application::VOLUME_DIR }/#{ @app.slug }"
      - volumes = Dir.exist?(dir_path) ? Dir.entries(dir_path).reject{ |n| ['.', '..'].include?(n) } : []
      - volumes.each do |vol|
        = f.input :volume, label: false, as: :extra_text, disabled: true, append: glyph('folder-open'), prepend: 'x', input_html: { value: "#{ dir_path }/#{ vol }" }, placeholder: 'eq. logs; infos/public'




